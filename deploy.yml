---
- name: Deploy Dockerized Website
  hosts: web
  become: true
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'  # Disable strict host key checking for SSH
    docker_user: "{{ lookup('env', 'DOCKER_USER') }}"  # Retrieve Docker Hub username from environment variable
    docker_pass: "{{ lookup('env', 'DOCKER_PASS') }}"  # Retrieve Docker Hub password from environment variable
    image_name: "websiteimage"  # Docker image name
    commit_hash: "{{ image_tag | default('latest') }}"  # Use the 'image_tag' variable passed by Jenkins or fallback to 'latest'

  tasks:
    - name: Remove conflicting packages
      apt:
        name: containerd
        state: absent
      ignore_errors: yes

    - name: Update package lists
      apt:
        update_cache: yes

    - name: Ensure required packages are installed
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - docker.io
        state: present
        update_cache: yes
      register: install_packages

    - name: Check if there are any held packages
      shell: dpkg --get-selections | grep hold
      register: held_packages
      ignore_errors: yes

    - name: Debug held packages
      debug:
        msg: "{{ held_packages.stdout_lines }}"

    - name: Resolve held packages if any
      apt:
        state: latest
        pkg: "{{ held_packages.stdout_lines | map('regex_replace', ' hold', '') | list }}"
      when: held_packages.stdout_lines | length > 0

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true

    - name: Log in to Docker Hub
      docker_login:
        username: "{{ docker_user }}"
        password: "{{ docker_pass }}"

    - name: Pull Docker image
      docker_image:
        name: "{{ docker_user }}/{{ image_name }}"
        tag: "{{ commit_hash }}"  # Pull the image with the latest or specific tag
        source: pull
        state: present

    - name: Stop existing website container
      docker_container:
        name: website
        state: absent
        force_kill: yes  # Forcefully stop and remove the existing container

    - name: Run new website container
      docker_container:
        name: website
        image: "{{ docker_user }}/{{ image_name }}:{{ commit_hash }}"  # Use the image with the latest or specific tag
        state: started
        ports:
          - "80:80"  # Map port 80 of the container to port 80 of the host
        restart_policy: always  # Ensure the container restarts if it stops
